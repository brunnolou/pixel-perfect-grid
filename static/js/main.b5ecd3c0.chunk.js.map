{"version":3,"sources":["serviceWorker.js","Column/index.js","BadNumber/BadNumber.js","ColumnData/ColumnData.js","Grid/Grid.js","fibonacciArray.js","Square/Square.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Column","_ref","_ref$padding","padding","margin","width","children","react_default","a","createElement","style","marginLeft","marginRight","BadNumber","styled","div","_templateObject","number","baseUnit","_ref2","bg","defaultProps","P","p","ColumnData_templateObject","ColumnData","x","division","size","BadNumber_BadNumber","Math","round","Grid","Grid_templateObject","height","_ref3","_ref4","_ref5","color","_ref6","fibonacciArray","Square","Square_templateObject","unit","per","range","n","times","arguments","length","undefined","scale","Array","fill","map","_","i","pow","isGood","fibScale","Flex","App_templateObject","ContainerStyled","_templateObject2","Container","position","maxWidth","opacity","Number","isInteger","App","_useState","useState","_useState2","Object","slicedToArray","setBaseUnit","_useState3","_useState4","containerUnit","setContainerUnit","_useState5","_useState6","containerMargin","setMargin","spacings","expo","roundSpacing","filter","slice","reverse","gutter","className","onChange","e","target","value","type","min","max","step","Grid_Grid","containerSize","src_ColumnData_ColumnData","Square_Square","title","space","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5ecd3c0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\n\nexport default function Column({ padding = ``, margin, width, children }) {\n  return (\n    <div\n      style={{\n        width,\n        padding,\n        marginLeft: margin,\n        marginRight: margin,\n        // background: \"rgba(255, 255, 0, 1)\"\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","import styled from \"styled-components\";\n\nconst BadNumber = styled.div`\n  opacity: ${({ number, baseUnit }) => (number % baseUnit !== 0 ? 0.2 : 1)};\n  background-color: ${({ bg }) => bg};\n`;\n\nBadNumber.defaultProps = {\n  baseUnit: 1\n};\n\nexport default BadNumber;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport BadNumber from \"../BadNumber/BadNumber\";\n\nexport const round = x => Math.round(x * 100) / 100;\n\nconst P = styled.p`\n\tpadding: 12px 0;\n`\n\nconst ColumnData = ({ width, division, margin, baseUnit }) => {\n  const size = width / division - margin * 2;\n\n  return (\n    <BadNumber number={size} baseUnit={baseUnit} bg={'yellow'}>\n      <P>\n        1 / {division}\n        <br />\n        {round(size)}px\n        <br />\n      </P>\n    </BadNumber>\n  );\n};\n\nexport default ColumnData;\n","import styled from \"styled-components\";\n\nconst Grid = styled.div`\n  position: relative;\n  width: ${({ width }) => width}px;\n  height: ${({ height }) => height}px;\n  margin: 0 auto;\n  background-size: ${({ size }) => size}px ${({ size }) => size}px;\n  background-image: linear-gradient(\n    to right,\n    ${({ color }) => color} 1px,\n    transparent 1px\n  );\n  box-shadow: 1px 0 0 ${({ color }) => color};\n`;\n\nGrid.defaultProps = {\n  color: \"rgba(0, 0, 0, 0.05)\"\n};\n\nexport default Grid;\n","const fibonacciArray = [\n  0,\n  1,\n  2,\n  3,\n  5,\n  8,\n  13,\n  21,\n  34,\n  55,\n  89,\n  144,\n  233,\n  377,\n  610,\n  987,\n  1597,\n  2584,\n  4181,\n  6765\n];\n\nexport default fibonacciArray;\n","import styled from \"styled-components\";\n\nconst Square = styled.div`\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  max-height: ${({ unit }) => unit * 8}px;;\n\tbackground-color: ${({ color }) => color};\n\tmargin-left: ${({ unit }) => unit}px;\n\tmargin-bottom: ${({ unit }) => unit * 2}px;\n\twhite-space: nowrap;\n`;\n\nSquare.defaultProps = {\n  color: \"rgba(255, 255, 0, 1)\"\n};\n\nexport default Square;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"./App.css\";\nimport Column from \"./Column\";\nimport Pill from \"./Pill\";\nimport ColumnData from \"./ColumnData/ColumnData\";\nimport Grid from \"./Grid/Grid\";\nimport fibonacciArray from \"./fibonacciArray\";\nimport Square from \"./Square/Square\";\nimport BadNumber from \"./BadNumber/BadNumber\";\n\nconst per = x => x * 100 + \"%\";\nconst range = (n, times = 1, scale = 1) =>\n  Array(n)\n    .fill()\n    .map((_, i) => Math.round(i * times * scale ** i));\n\nconst isGood = x => x % 2 === 0 && x % 3 === 0 && x % 4 === 0;\nconst fibScale = baseUnit => fibonacciArray.map(x => x * baseUnit);\n\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst ContainerStyled = styled.div`\n  background: rgba(100, 100, 100, 0.1);\n`;\n\nfunction Container({ margin, width, children }) {\n  return (\n    <ContainerStyled\n      style={{\n        position: \"relative\",\n        margin: margin + \"px auto\",\n        width: \"100%\",\n        maxWidth: width\n      }}\n    >\n      <Flex\n        style={{\n          marginLeft: margin * -1,\n          marginRight: margin * -1\n        }}\n      >\n        {children ? (\n          children\n        ) : (\n          <small\n            style={{\n              opacity: isGood(width) ? 1 : Number.isInteger(width) ? 0.5 : 0.2\n            }}\n          >\n            {width}\n          </small>\n        )}\n      </Flex>\n    </ContainerStyled>\n  );\n}\n\nfunction App() {\n  const [baseUnit, setBaseUnit] = useState(6);\n  const spacingsLength = 32 * 8;\n  const [containerUnit, setContainerUnit] = useState(37);\n  const [containerMargin, setMargin] = useState(3);\n\n  const fibSpacings = fibScale(baseUnit, 1);\n  const spacings = range(spacingsLength, baseUnit, 1);\n  const expo = range(spacingsLength, 1, 1.09);\n\n  const roundSpacing = spacings\n    .map((_, i) => baseUnit * spacings[i + containerUnit])\n    .filter(isGood)\n    .slice(0, 1)\n    .reverse();\n\n  const margin = spacings[containerMargin];\n  const gutter = margin * 2;\n\n  return (\n    <div className=\"App\">\n      {/* <div style={{ overflowX: \"auto\" }}>\n        <table>\n          <tbody>\n            <tr>\n              <th>Index</th>\n              {spacings.map((space, i) => (\n                <td>\n                  <small width={space} title={i}>\n                    {i}\n                  </small>\n                </td>\n              ))}\n            </tr>\n            <tr>\n              <th>Space</th>\n              {spacings.map((space, i) => (\n                <td>\n                  <Pill width={space} title={i}>\n                    {space}\n                  </Pill>\n                </td>\n              ))}\n            </tr>\n            <tr>\n              <th>&times;BaseUnit</th>\n\n              {spacings.map((space, i) => (\n                <td>\n                  <Pill width={space * baseUnit} title={i}>\n                    {space * baseUnit}\n                  </Pill>\n                </td>\n              ))}\n            </tr>\n            <tr>\n              <th>Major</th>\n\n              {expo.map((space, i) => (\n                <td>\n                  <Pill width={spacings[space]} title={i}>\n                    {spacings[space]}\n                  </Pill>\n                </td>\n              ))}\n            </tr>\n            <tr>\n              <th>Fibonacci</th>\n              {fibSpacings.map((space, i) => (\n                <td>\n                  <Pill width={space} title={i}>\n                    {space}\n                  </Pill>\n                </td>\n              ))}\n            </tr>\n          </tbody>\n        </table>\n      </div> */}\n\n      <p>\n        <b>Base unit: </b>\n        <input\n          onChange={e => setBaseUnit(Number(e.target.value))}\n          type=\"range\"\n          min=\"0\"\n          max=\"50\"\n          step=\"2\"\n          value={baseUnit}\n        />\n        {baseUnit}\n      </p>\n\n      <p>\n        <b>Container width: </b>\n        <input\n          onChange={e => setContainerUnit(Number(e.target.value))}\n          type=\"range\"\n          min=\"0\"\n          max={spacingsLength}\n          value={containerUnit}\n        />\n        {containerUnit}\n      </p>\n\n      <p>\n        <b>Margin</b> {containerMargin}\n        <input\n          onChange={e => setMargin(Number(e.target.value))}\n          type=\"range\"\n          min=\"0\"\n          max={spacingsLength}\n          value={containerMargin}\n        />\n        {margin}\n      </p>\n\n      <p>\n        <b>Gutter: </b>\n        {gutter}\n      </p>\n\n      {roundSpacing.map(i => (\n        <Grid size={baseUnit} width={i + gutter * 2} height={\"auto\"}>\n          <Container margin={margin} width={i + gutter * 2}>\n            <div>\n              <h1>\n                {i + gutter * 2}\n                <small>px</small>\n              </h1>\n              <small>With 2 gutters: {gutter * 2}px</small>\n            </div>\n          </Container>\n\n          <Container margin={margin} width={i + gutter}>\n            <center>\n              <p>\n                {i + gutter} + <small>margin: {gutter}</small>\n              </p>\n              <small>With half gutter: {gutter * 2}px</small>\n            </center>\n          </Container>\n\n          <h1>Containers size</h1>\n          {[[1, 1], [10, 12], [2, 3], [1, 2], [1, 3]].map(([x, div]) => {\n            const columnWidth = (i + gutter) / div - gutter;\n            const containerSize = x * columnWidth + (x - 1) * gutter;\n            return (\n              <Container margin={margin} width={i}>\n                <Column margin={margin} width={containerSize}>\n                  <BadNumber number={containerSize} bg={\"yellow\"}>\n                    {containerSize}\n                  </BadNumber>\n                </Column>\n              </Container>\n            );\n          })}\n\n          <h1>Column widths</h1>\n          {i > 1152 && (\n            <Container margin={margin} width={i}>\n              {[12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12].map(x => (\n                <Column margin={margin} width={per(1 / x)}>\n                  <ColumnData\n                    width={i + gutter}\n                    division={x}\n                    margin={margin}\n                    baseUnit={baseUnit}\n                  />\n                </Column>\n              ))}\n            </Container>\n          )}\n\n          {i > 540 && (\n            <Container margin={margin} width={i}>\n              {[6, 6, 6, 6, 6, 6].map(x => (\n                <Column margin={margin} width={per(1 / x)}>\n                  <ColumnData\n                    width={i + gutter}\n                    division={x}\n                    margin={margin}\n                    baseUnit={baseUnit}\n                  />\n                </Column>\n              ))}\n            </Container>\n          )}\n\n          {i > 360 && (\n            <Container margin={margin} width={i}>\n              {[4, 4, 4, 4].map(x => (\n                <Column margin={margin} width={per(1 / x)}>\n                  <ColumnData\n                    width={i + gutter}\n                    division={x}\n                    margin={margin}\n                    baseUnit={baseUnit}\n                  />\n                </Column>\n              ))}\n            </Container>\n          )}\n\n          {i > 324 && (\n            <Container margin={margin} width={i}>\n              {[3, 3, 3].map(x => (\n                <Column margin={margin} width={per(1 / x)}>\n                  <ColumnData\n                    width={i + gutter}\n                    division={x}\n                    margin={margin}\n                    baseUnit={baseUnit}\n                  />\n                </Column>\n              ))}\n            </Container>\n          )}\n\n          <Container margin={margin} width={i}>\n            {[2, 2].map(x => (\n              <Column margin={margin} width={per(1 / x)}>\n                <ColumnData\n                  width={i + gutter}\n                  division={x}\n                  margin={margin}\n                  baseUnit={baseUnit}\n                />\n              </Column>\n            ))}\n          </Container>\n\n          <h1>Spacing</h1>\n\n          <Square size={baseUnit / 2} unit={baseUnit} title={i}>\n            {1} - <small>{baseUnit / 2}px</small>\n          </Square>\n\n          {spacings.slice(0, 8).map(\n            (space, i) =>\n              !!i && (\n                <Square size={space} unit={baseUnit} title={i}>\n                  {i + 1} - <small>{space}px</small>\n                </Square>\n              )\n          )}\n\n          {/* {[[1, 1], [10, 12], [2, 3], [1, 2], [1, 3], [1, 6], [1, 12]]\n            .reverse()\n            .map(([x, div], index) => {\n              const columnWidth = (i + gutter) / div - gutter;\n              const containerSize = x * columnWidth + (x - 1) * gutter;\n              return (\n                <>\n                  <Square size={containerSize} unit={baseUnit} title={index}>\n                    {index + 7} - <small>{containerSize}px</small>\n                  </Square>\n                </>\n              );\n            })} */}\n\n          {expo.slice(5).map(\n            (space, i) =>\n              !!i &&\n              !!spacings[space] && (\n                <Square size={spacings[space]} unit={baseUnit} title={i}>\n                  {i + 8} - <small>{spacings[space]}px</small>\n                </Square>\n              )\n          )}\n        </Grid>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n// import FibonacciGrid from './FibonacciGrid';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<FibonacciGrid />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}